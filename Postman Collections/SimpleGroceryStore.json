{
	"info": {
		"_postman_id": "7c16b652-1f6d-4b82-a763-3bf7d2b425c2",
		"name": "Simple grocery store",
		"description": "This API allows you to place a grocery order which will be ready for pick-up in the store.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Get single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4c21059-c06d-4f52-9263-e4e04cbbf0fa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check product name\", () => {\r",
									"    //get the js object coresponding to the json body response\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    //console.log(response.name);\r",
									"    pm.expect(response.name).to.eql('Ethical Bean Medium Dark Roast, Espresso');\r",
									"})\r",
									"\r",
									"pm.test(\"Check product price is a number\", () => {\r",
									"    //get the js object coresponding to the json body response\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.price).to.be.a(\"number\");\r",
									"})\r",
									"\r",
									"pm.test(\"Product is in stock\", () => {\r",
									"    //get the js object coresponding to the json body response\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    //console.log(response.name);\r",
									"    pm.expect(response.inStock).to.eql(true);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c93f6345-ef96-4b16-8419-89e7fb75f00d",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "74904045-6830-4f52-82b5-2233fd872e8a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/products/:productId",
							"host": [
								"{{url}}"
							],
							"path": [
								"products",
								":productId"
							],
							"query": [
								{
									"key": "product-label",
									"value": "true",
									"description": "Returns the product label in PDF format.",
									"type": "text",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "productId",
									"value": "4646",
									"description": "Specifies the product's id you wish to retrieve."
								}
							]
						},
						"description": "Returns a single product from the inventory."
					},
					"response": []
				},
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7c8983d-62e6-49cd-b621-a9f295f040a6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "be20a562-fb15-46d7-a4ce-d3d9f2127f92",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8b53d3cc-aacb-48aa-b543-839d1ddce4b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee",
									"description": "Specifies the category of products you want to be returned. It can be one of: meat-seafood, fresh-produce, candy, bread-bakery, dairy, eggs, coffee.",
									"disabled": true
								},
								{
									"key": "results",
									"value": "2",
									"description": "Specifies the number of results you want. Must be number between 1 and 20. By default, only 20 products will be displayed.",
									"disabled": true
								},
								{
									"key": "available",
									"value": null,
									"description": "Specifies the availability of the products. By default, all products will be displayed.",
									"disabled": true
								}
							]
						},
						"description": "Returns a list of products from the inventory."
					},
					"response": []
				}
			],
			"id": "96ff5cee-fffd-41ab-b0cf-051f12eed80a"
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Create a new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36c5705f-6014-4ed2-b174-6deab28deb6d",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "350cb981-1647-47c0-9147-44d342b542a6",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6464a708-91b4-4bf3-bc67-ebcfa57f8c33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": "{{url}}/carts",
						"description": "Creates a new cart and returns the id in the response body."
					},
					"response": []
				},
				{
					"name": "Get cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0946606e-f6ef-4ef9-9bd5-89ea26069195",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3dbc3cbe-c362-4553-a089-742c760d292d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check status code is 404 - Not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3e1deb5f-c48a-4ae6-ba9b-fa73ab23aba8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/carts/:cartId",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}",
									"description": "Specifies the id of the cart you wish to retrieve."
								}
							]
						},
						"description": "Returns a cart."
					},
					"response": []
				},
				{
					"name": "Add an item to cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "089e1b72-d465-4455-8cdc-f19f9e03a49d",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fb5380e1-c2ad-4870-b77f-8781c262fa5f",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Add an item to cart, with invalid params\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "58340827-535d-4771-bb21-b218e42bdd6b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": 4643\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/carts/:cartId/items?productId&quantity",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"query": [
								{
									"key": "productId",
									"value": null,
									"description": "Specifies the product id."
								},
								{
									"key": "quantity",
									"value": null,
									"description": "If no quantity is provided, the default value is 1."
								}
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}",
									"description": "Specifies the cart id."
								}
							]
						},
						"description": "Allows the addition of items to an existing cart. Only one item can be added at a time. The request body needs to be in JSON format."
					},
					"response": []
				},
				{
					"name": "Get cart items",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "22c90ae8-ced8-43fd-8b52-806b663670f3",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cb3889ff-c5ca-4130-a957-6447b958e24c",
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404 Not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9a4b366a-afdc-47d8-9c96-81b0ce7b23b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/carts/:cartId/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}",
									"description": "Specifies the id of the cart for which you wish to retrieve the items."
								}
							]
						},
						"description": "Returns the items in a cart."
					},
					"response": []
				},
				{
					"name": "Modify an item in the cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "38e4ca5f-8c9f-4350-9ec0-19939e57a842",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1efde32e-229d-426e-b669-5c16366f8e60",
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d10d4710-e02d-443f-980a-539cf68e3583",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/carts/:cartId/items/:itemId",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "176001770"
								}
							]
						},
						"description": "Allows modifying information about an item in the cart.\r\nThe request body needs to be in JSON format.\r\n"
					},
					"response": []
				},
				{
					"name": "Replace an item in the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbbf008c-403f-4d82-96b2-35a9d29e11ec",
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15b1e004-e3ff-41cd-a3f4-22fa259cad63",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6089d265-0c2f-4b52-9bc8-f9a9d30c4532",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\" : 4646,\r\n    \"quantity\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/carts/:cartId/items/:itemId",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}",
									"description": "Specifies the cart id."
								},
								{
									"key": "itemId",
									"value": "176001770",
									"description": "Specifies the item id."
								}
							]
						},
						"description": "Replace an item in the car. The request body needs to be in JSON format."
					},
					"response": []
				},
				{
					"name": "Delete an item from the cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7e727ad4-9660-41e7-8d9a-4cad87cb32cb",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "69141064-ae28-4e6f-8149-ed35839ee5f1",
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "84b04fbe-e0ad-4682-9221-1262e6e2b954",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/carts/:cartId/items/:itemId",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "27057726"
								}
							]
						},
						"description": "Deletes an item in the cart."
					},
					"response": []
				}
			],
			"id": "89845c29-1146-46f0-9787-f8a16c5cf956"
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create an order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "042f20b2-4a11-401a-aa07-e8afcc6878d2",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ab5c3f6e-c51d-4a0e-b336-67180fdc8790",
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "cc1ed4a6-2d12-40d0-9931-b519e36a61bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"John Doe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/orders",
						"description": "The request body needs to be in JSON format. Once the order has been successfully submitted, the cart is deleted."
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fd3ee0a1-46cc-4833-a4fa-e760c89451a8",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a73e5cdb-4520-47a7-a806-a91b6c59dcff",
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9313f4b2-cc0a-4fa8-9943-19a6de24c90c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{url}}/orders",
						"description": "Returns all orders created by the API client."
					},
					"response": []
				},
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b12e8c79-5393-4ebb-bc92-c2625ece729e",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9da410ef-3766-4f69-bbf7-54fdfdb9f047",
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0321bbea-f6d0-45cf-bd9d-25558f412fd6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comment\": \"pickup at 2PM\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/orders/:orderId",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "Or_JyaXdazCTImPni-8AC",
									"description": "The order id."
								}
							]
						},
						"description": "Returns all orders created by the API client."
					},
					"response": []
				},
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7d1027d5-eaa8-4af8-a960-82ee8344f8cf",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fc47fe97-d087-4659-ba36-26aa569a1396",
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d52d219c-9938-4522-b9bf-7b419b539c3f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/orders/:orderId",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "Or_JyaXdazCTImPni-8AC",
									"description": "The order id."
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "360c20d6-1db3-4b9d-9f0c-590accce67c7"
		},
		{
			"name": "API Authentication",
			"item": [
				{
					"name": "Register a new API client",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "25506f19-0fcc-4288-8d38-6acf8855b978",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b8aea9cb-be58-412d-9733-b26618d832c4",
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 409 Conflict\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b3d40689-da8d-47fc-a6d4-fb0aa7944d2d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientName\": \"Postman on Gabi's computer\",\r\n    \"clientEmail\": \"email@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/api-clients",
						"description": "The response body will contain the access token."
					},
					"response": []
				}
			],
			"id": "5dfdb78f-bfaa-40c2-b467-ea9fcaf939f1"
		},
		{
			"name": "Status",
			"item": [
				{
					"name": "Get status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d3ccb93-e3b8-4096-b8b9-cfcac1b011fc",
								"exec": [
									"pm.test(\"Status code is 200\", \r",
									"        () => pm.response.to.have.status(200));\r",
									"\r",
									"pm.test(\"Check the status\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"UP\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7d227128-3dcf-4f2d-a1d7-3bbc245f8c3d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}/status",
						"description": "Returns the status of the API. Status `UP` indicates that the API is running as expected. No response or any other response indicates that the API is not functioning correctly."
					},
					"response": []
				}
			],
			"id": "95511403-a0e3-43c1-a8c5-c891af08682c"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8e70775c-2f69-42a0-a836-44aec1c0a620",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c247a46e-cc3d-4180-8025-25d5b6aa8411",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://simple-grocery-store-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "Your access token",
			"type": "string"
		},
		{
			"key": "cartId",
			"value": "wyCNrNCmLe9_MIYb3JfCn",
			"type": "string"
		}
	]
}